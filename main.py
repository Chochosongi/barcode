from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import pandas as pd
import json
import sys

print("[DEBUG] ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ ÌååÏù¥Ïç¨:", sys.executable)
print("[DEBUG] sys.path:", sys.path)
print("[DEBUG] fastapi Î°úÎìú ÏÑ±Í≥µ ‚úÖ")

# ‚úÖ ÌååÏùº Í≤ΩÎ°ú
CSV_PATH = "Nutnutrition_DB.xlsx"
JSON_PATH = "disease_limits.json"

# ‚úÖ CSV Î°úÎìú
try:
    df = pd.read_excel(CSV_PATH, dtype={"barcode": str})
    df.fillna("", inplace=True)

    # üî• Î∞îÏΩîÎìú Î¨∏ÏûêÏó¥ Î≥ÄÌôò + Í≥µÎ∞± Ï†úÍ±∞
    df["barcode"] = df["barcode"].astype(str).str.strip()

    # float Î≥ÄÌôò
    df["protein"] = df["protein"].astype(float)
    df["sugar"] = df["sugar"].astype(float)
    df["sodium"] = df["sodium"].astype(float)
    df["calories"] = df["calories"].astype(float)

    print(df["barcode"].head(10))
    print(f"[INFO] CSV Î°úÎìú ÏôÑÎ£å: {len(df)}Í∞ú Ìï≠Î™©")
except Exception as e:
    print(f"[ERROR] CSV Î°úÎìú Ïã§Ìå®: {e}")
    df = pd.DataFrame()

# ‚úÖ JSON Î°úÎìú
try:
    with open(JSON_PATH, "r", encoding="utf-8") as f:
        disease_limits = json.load(f)
    print(f"[INFO] ÏßàÌôò Ï†úÌïú Î°úÎìú ÏôÑÎ£å: {len(disease_limits)}Í∞ú")
except Exception as e:
    print(f"[ERROR] JSON Î°úÎìú Ïã§Ìå®: {e}")
    disease_limits = []

# ‚úÖ FastAPI Ïï± Ï¥àÍ∏∞Ìôî
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ ÏöîÏ≤≠ Ïä§ÌÇ§Îßà
class BarcodeRequest(BaseModel):
    barcode: str
    disease_ids: List[int]

# ‚úÖ API ÏóîÎìúÌè¨Ïù∏Ìä∏
@app.post("/barcode")
def get_food_info(req: BarcodeRequest):
    print(f"[API ÏöîÏ≤≠Îê®] barcode={req.barcode}, diseases={req.disease_ids}")
    print(f"[DEBUG] Î∞îÏΩîÎìú ÎπÑÍµê ÎåÄÏÉÅÎì§: {df['barcode'].tolist()[:5]}")

    barcode = req.barcode.strip()
    result = df[df["barcode"] == barcode]

    if result.empty:
        raise HTTPException(status_code=404, detail="Ìï¥Îãπ Î∞îÏΩîÎìú Ï†ïÎ≥¥ ÏóÜÏùå")

    row = result.iloc[0]
    protein = row["protein"]
    sugar = row["sugar"]
    sodium = row["sodium"]
    item_name = row["itemName"]
    calories = row["calories"]

    # ‚úÖ ÏßàÌôò Ï†úÌïú ÎπÑÍµê
    violations = []
    for d in disease_limits:
        if d["diseaseId"] in req.disease_ids:
            if (
                protein > d["proteinLimit"]
                or sugar > d["sugarLimit"]
                or sodium > d["sodiumLimit"]
            ):
                violations.append(f'{d["diseaseName"]}: {d["notes"]}')

    notes = "Safe to consume." if not violations else "Not recommended: " + "; ".join(violations)

    return {
        "barcode": barcode,
        "itemName": item_name,
        "protein": protein,
        "sugar": sugar,
        "sodium": sodium,
        "calories": calories,
        "notes": notes,
    }

# ‚úÖ ÏßÅÏ†ë Ïã§Ìñâ Ïãú
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
